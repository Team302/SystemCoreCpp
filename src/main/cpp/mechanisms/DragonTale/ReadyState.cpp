//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 8:51:02 PM

// C++ Includes
#include <string>

// FRC includes

// Team 302 includes
#include "mechanisms/DragonTale/ReadyState.h"
#include "teleopcontrol/TeleopControl.h"
#include "teleopcontrol/TeleopControlFunctions.h"
#include "utils/logging/debug/Logger.h"

// Third Party Includes

using namespace std;
using namespace DragonTaleStates;

/// @class ExampleForwardState
/// @brief information about the control (open loop, closed loop position, closed loop velocity, etc.) for a mechanism state
ReadyState::ReadyState(std::string stateName,
					   int stateId,
					   DragonTale *mech,
					   RobotIdentifier activeRobotId) : State(stateName, stateId), m_mechanism(mech), m_RobotId(activeRobotId), m_scoringTimer(new frc::Timer())
{
}

void ReadyState::Init()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ReadyState"), string("Init"));

	if (m_RobotId == RobotIdentifier::PRACTICE_BOT_9999)
		InitPRACTICE_BOT9999();
	else if (m_RobotId == RobotIdentifier::COMP_BOT_302)
		InitCOMP_BOT302();

	m_mechanism->UpdateTargetCoralPercentOutput(m_CoralTarget);
	m_mechanism->SetArmTarget(m_ArmTarget);
	m_mechanism->SetElevatorTarget(m_ElevatorLeaderTarget);
}

void ReadyState::InitPRACTICE_BOT9999()
{
	m_mechanism->UpdateTargetAlgaeTalonFXPercentOutput(m_AlgaeTarget);
}

void ReadyState::InitCOMP_BOT302()
{
	m_mechanism->UpdateTargetAlgaeTalonFXSPercentOutput(m_AlgaeTarget);
}

void ReadyState::Run()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ReadyState"), string("Run"));
}

void ReadyState::Exit()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ReadyState"), string("Exit"));
}

bool ReadyState::AtTarget()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ReadyState"), string("AtTarget"));

	bool atTarget = false;
	return atTarget;
}

bool ReadyState::IsTransitionCondition(bool considerGamepadTransitions)
{
	// To get the current state use m_mechanism->GetCurrentState()
	bool transition = false;
	int currentState = m_mechanism->GetCurrentState();
	if ((m_mechanism->AllSensorsFalse() && !TeleopControl::GetInstance()->IsButtonPressed(TeleopControlFunctions::HUMAN_PLAYER_STATION) && (currentState == DragonTale::STATE_NAMES::STATE_HOLD || (currentState == DragonTale::STATE_NAMES::STATE_SCORE_ALGAE) || (currentState == DragonTale::STATE_NAMES::STATE_SCORE_CORAL))))
	{
		m_scoringTimer->Start(); // This works becuase IsTransitionCondition is called every loop and it is the the first state to check the transition condition
		if (m_scoringTimer->Get() > units::time::second_t(0.25))
			transition = true;
	}
	else
	{
		m_scoringTimer->Stop();
		m_scoringTimer->Reset();
	}

	return ((considerGamepadTransitions && TeleopControl::GetInstance()->IsButtonPressed(TeleopControlFunctions::READY)) ||
			transition ||
			(currentState == DragonTale::STATE_NAMES::STATE_INITIALIZE));
}
