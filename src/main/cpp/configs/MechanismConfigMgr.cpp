//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 6:47:31 PM

#include <string>

#include "configs/MechanismConfig.h"
#include "configs/MechanismConfigCOMP_BOT_302.h"
#include "configs/MechanismConfigMgr.h"
#include "configs/MechanismConfigPRACTICE_BOT_9999.h"
#include "utils/logging/debug/Logger.h"

using namespace std;

MechanismConfigMgr *MechanismConfigMgr::m_instance = nullptr;
MechanismConfigMgr *MechanismConfigMgr::GetInstance()
{
	if (MechanismConfigMgr::m_instance == nullptr)
	{
		MechanismConfigMgr::m_instance = new MechanismConfigMgr();
	}
	return MechanismConfigMgr::m_instance;
}

MechanismConfigMgr::MechanismConfigMgr() : m_config(nullptr)
{
}

void MechanismConfigMgr::InitRobot(RobotIdentifier id)
{
	switch (id)
	{
	case RobotIdentifier::PRACTICE_BOT_9999:
		Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Initializing robot "), string("PRACTICE_BOT_9999"), string(""));
		m_config = new MechanismConfigPRACTICE_BOT_9999();
		break;
	case RobotIdentifier::COMP_BOT_302:
		Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Initializing robot "), string("COMP_BOT_302"), string(""));
		m_config = new MechanismConfigCOMP_BOT_302();
		break;
	case RobotIdentifier::SIM_BOT_0:
		Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Initializing robot "), string("SIM_BOT_0"), string(""));
		m_config = new MechanismConfigCOMP_BOT_302();
		break;

	default:
		Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Skipping robot initialization because of unknown robot id "), string(""), static_cast<int>(id));
		break;
	}

	if (m_config != nullptr)
	{
		m_config->BuildRobot();
		Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Initialization completed for robot "), string(""), static_cast<int>(id));
	}
}
