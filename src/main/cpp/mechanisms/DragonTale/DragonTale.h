//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 8:51:02 PM

#pragma once

#include <memory>
#include <string>

// FRC Includes
#include <networktables/NetworkTable.h>

#include "ctre/phoenix6/TalonFX.hpp"
#include "ctre/phoenix6/controls/Follower.hpp"
#include "ctre/phoenix6/configs/Configs.hpp"
#include "ctre/phoenix6/TalonFXS.hpp"
#include "frc/filter/Debouncer.h"
#include "ctre/phoenix6/CANcoder.hpp"
#include "ctre/phoenix6/configs/Configurator.hpp"
#include "ctre/phoenix6/signals/SpnEnums.hpp"
#include "ctre/phoenix6/SignalLogger.hpp"
#include "ctre/phoenix6/CANrange.hpp"
#include "ctre/phoenix6/CANdi.hpp"
#include "frc/controller/ProfiledPIDController.h"

#include "mechanisms/base/BaseMech.h"
#include "state/StateMgr.h"
#include "state/IRobotStateChangeSubscriber.h"
#include "mechanisms/controllers/ControlData.h"
#include "state/RobotStateChanges.h"

#include "configs/RobotElementNames.h"
#include "configs/MechanismConfigMgr.h"
#include "utils/logging/signals/DragonDataLogger.h"

#include "RobotIdentifier.h"

#include "frc/geometry/Pose2d.h"
#include "fielddata/FieldConstants.h"

using ctre::phoenix6::SignalLogger;
using namespace std;

class DragonTale : public BaseMech, public StateMgr, public DragonDataLogger, public IRobotStateChangeSubscriber
{
public:
	enum STATE_NAMES
	{
		STATE_INITIALIZE,
		STATE_READY,
		STATE_HUMAN_PLAYER_LOAD,
		STATE_GRAB_ALGAE_REEF,
		STATE_HOLD,
		STATE_GRAB_ALGAE_FLOOR,
		STATE_PROCESS,
		STATE_NET,
		STATE_SCORE_ALGAE,
		STATE_L1SCORING_POSITION,
		STATE_L2SCORING_POSITION,
		STATE_L3SCORING_POSITION,
		STATE_L4SCORING_POSITION,
		STATE_SCORE_CORAL,
		STATE_MANUAL_CORAL_LOAD,
		STATE_MANUAL_GRAB_ALGAE_REEF,
		STATE_MANUAL_GRAB_ALGAE_FLOOR,
		STATE_LAUNCH_NET
	};

	DragonTale(RobotIdentifier activeRobotId);
	DragonTale() = delete;
	~DragonTale() = default;

	void CreatePRACTICE_BOT9999();
	void CreateCOMP_BOT302();
	void InitializePRACTICE_BOT9999();
	void InitializeCOMP_BOT302();

	/// @brief Set the control constants (e.g. PIDF values).
	/// @param indentifier the motor controller usage to identify the motor
	/// @param slot position on the motor controller to set
	/// @param pid control data / constants
	virtual void SetControlConstants(RobotElementNames::MOTOR_CONTROLLER_USAGE indentifier, int slot, ControlData pid);

	/// @brief update the output to the mechanism using the current controller and target value(s)
	virtual void Update();

	void UpdateTargetArmPositionDegree(units::angle::turn_t position)
	{
		m_ArmPositionDegree.Position = position;
		m_ArmActiveTarget = &m_ArmPositionDegree;
	}
	void UpdateTargetArmPercentOutput(double percentOut)
	{
		m_ArmPercentOutput.Output = percentOut;
		m_ArmActiveTarget = &m_ArmPercentOutput;
	}
	void UpdateTargetElevatorLeaderPositionInch(units::length::inch_t position)
	{
		m_ElevatorLeaderPositionInch.Position = units::angle::turn_t(position.value());
		m_ElevatorLeaderActiveTarget = &m_ElevatorLeaderPositionInch;
	}
	void UpdateTargetElevatorLeaderVoltage(units::voltage::volt_t volts)
	{
		m_ElevatorLeaderVoltageOutput.Output = volts + m_elevatorFeedForwardVoltage;
		m_ElevatorLeaderActiveTarget = &m_ElevatorLeaderVoltageOutput;
	}
	void UpdateTargetCoralPercentOutput(double percentOut)
	{
		m_CoralPercentOutput.Output = percentOut;
		m_CoralActiveTarget = &m_CoralPercentOutput;
	}
	void UpdateTargetAlgaeTalonFXPercentOutput(double percentOut)
	{
		m_AlgaePercentOutput.Output = percentOut;
		m_AlgaeTalonFXActiveTarget = &m_AlgaePercentOutput;
	}
	void UpdateTargetAlgaeTalonFXSPercentOutput(double percentOut)
	{
		m_AlgaePercentOutput.Output = percentOut;
		m_AlgaeTalonFXSActiveTarget = &m_AlgaePercentOutput;
	}
	void UpdateTargetElevatorLeaderPercentOutput(double percentOut)
	{
		m_ElevatorLeaderPercentOutput.Output = percentOut;
		m_ElevatorLeaderActiveTarget = &m_ElevatorLeaderPercentOutput;
	}

	virtual bool IsAtMinPosition(RobotElementNames::MOTOR_CONTROLLER_USAGE identifier) const;
	virtual bool IsAtMaxPosition(RobotElementNames::MOTOR_CONTROLLER_USAGE identifier) const;

	void CreateAndRegisterStates();
	void Cyclic();
	void RunCommonTasks() override;
	void DataLog(uint64_t timestamp) override;
	void LogInformation();

	RobotIdentifier getActiveRobotId() { return m_activeRobotId; }

	ctre::phoenix6::hardware::TalonFX *GetArm() const { return m_Arm; }
	ctre::phoenix6::hardware::TalonFX *GetElevatorLeader() const { return m_ElevatorLeader; }
	ctre::phoenix6::hardware::TalonFX *GetAlgaeTalonFX() const { return m_AlgaeTalonFX; }
	ctre::phoenix6::hardware::TalonFX *GetElevatorFollower() const { return m_ElevatorFollower; }
	ctre::phoenix6::hardware::TalonFXS *GetCoral() const { return m_Coral; }
	ctre::phoenix6::hardware::TalonFXS *GetAlgaeTalonFXS() const { return m_AlgaeTalonFXS; }

	bool GetCoralOutSensorState() const { return m_ArmSensors->GetS1Closed().GetValue(); }
	bool GetAlgaeSensorState() const { return m_ArmSensors->GetS2Closed().GetValue(); }
	bool GetBranchCANRangeState() const { return false; }
	// bool GetBranchCANRangeState() const { return m_BranchCANRange != nullptr ? m_BranchCANRange->GetIsDetected().GetValue() : false; }
	// bool GetBranchCANRangeState() const { return false; }

	bool IsValidTarget() { return m_BranchCANRange != nullptr ? m_BranchCANRange->GetDistanceStdDev().GetValue() < 0.075_m : false; }
	// bool IsValidTarget() { return false; }
	// units::length::inch_t GetElevatorCANRangeHeight() { return units::length::inch_t(m_ElevatorCANRange->GetDistance().GetValue()) - 2.0_in + 0.71_in; }
	ctre::phoenix6::hardware::CANcoder *GetArmAngleSensor() const { return m_ArmAngleSensor; }
	ctre::phoenix6::hardware::CANcoder *GetElevatorHeightSensor() const { return m_ElevatorHeightSensor; }
	ControlData *GetPositionInch() const { return m_PositionInch; }
	ControlData *GetPositionDegree() const { return m_PositionDegree; }
	ControlData *GetPercentOutput() const { return m_PercentOutput; }

	units::length::inch_t GetElevatorHeight() { return units::length::inch_t(m_ElevatorLeader->GetPosition().GetValueAsDouble()); }
	bool AllSensorsFalse() { return !GetCoralOutSensorState() && !GetAlgaeSensorState(); }

	units::angle::degree_t GetArmAngle() { return m_ArmAngleSensor->GetAbsolutePosition().GetValue(); }

	bool IsCoralMode() const { return m_scoringMode == RobotStateChanges::ScoringMode::Coral; }
	bool IsAlgaeMode() const { return m_scoringMode == RobotStateChanges::ScoringMode::Algae; }
	bool IsInBargeZone() const { return m_isInBargeZone; }
	bool IsInReefZone() const { return m_isInReefZone; }
	bool IsDriveToIsDone() const { return m_isDriveToIsDone; }

	void NotifyStateUpdate(RobotStateChanges::StateChange change, int value) override;
	void NotifyStateUpdate(RobotStateChanges::StateChange change, bool value) override;

	void SetAlgaeReefPosition();

	void SetArmTarget(units::angle::degree_t target)
	{
		m_armTarget = std::clamp(target, m_minAngle, m_maxAngle);
	}
	void SetElevatorTarget(units::length::inch_t target) { m_elevatorTarget = std::clamp(target, m_minHeight, m_maxHeight); }

	bool GetManualMode() { return m_manualMode; }
	void SetSensorFailSafe();

	void UpdateTarget();

	bool AtTarget();

	bool IsTeleop() { return m_gameMode == RobotStateChanges::GamePeriod::Teleop; };

	static std::map<std::string, STATE_NAMES> stringToSTATE_NAMESEnumMap;

	void SetCurrentState(int state, bool run) override;

	bool GetRemedialActionStatus() { return m_elevatorRemedialAction; }

protected:
	RobotIdentifier m_activeRobotId;
	std::string m_ntName;

	ControlData *GetControlData(std::string name) override;

private:
	std::unordered_map<std::string, STATE_NAMES> m_stateMap;

	ctre::phoenix6::hardware::TalonFX *m_Arm;
	ctre::phoenix6::hardware::TalonFX *m_ElevatorLeader;
	ctre::phoenix6::hardware::TalonFX *m_AlgaeTalonFX;
	ctre::phoenix6::hardware::TalonFX *m_ElevatorFollower;
	ctre::phoenix6::hardware::TalonFXS *m_Coral;
	ctre::phoenix6::hardware::TalonFXS *m_AlgaeTalonFXS;
	ctre::phoenix6::hardware::CANdi *m_ArmSensors;
	ctre::phoenix6::hardware::CANrange *m_BranchCANRange;
	ctre::phoenix6::hardware::CANrange *m_ElevatorCANRange;
	ctre::phoenix6::hardware::CANcoder *m_ArmAngleSensor;
	ctre::phoenix6::hardware::CANcoder *m_ElevatorHeightSensor;
	ControlData *m_PositionInch;
	ControlData *m_PositionDegree;
	ControlData *m_PercentOutput;
	RobotStateChanges::ScoringMode m_scoringMode = RobotStateChanges::ScoringMode::Coral;
	RobotStateChanges::GamePeriod m_gameMode = RobotStateChanges::GamePeriod::Disabled;
	RobotStateChanges::ClimbMode m_climbMode = RobotStateChanges::ClimbMode::ClimbModeOff;
	bool m_isInBargeZone = false;
	bool m_isInReefZone = false;
	bool m_isDriveToIsDone = false;

	const units::length::inch_t m_grabAlgaeHigh = units::length::inch_t(9.25);
	const units::length::inch_t m_grabAlgaeLow = units::length::inch_t(2.0);
	const units::angle::degree_t m_grabAlgaeHighAngle = units::angle::degree_t(67.0);
	const units::angle::degree_t m_grabAlgaeLowAngle = units::angle::degree_t(67.0);
	units::length::inch_t m_prevAlgaeHeight{0.0};

	units::angle::degree_t m_armTarget = units::angle::degree_t(90.0);
	units::length::inch_t m_elevatorTarget = units::length::inch_t(0.0);

	const units::angle::degree_t m_minAngle{-30.0};
	const units::angle::degree_t m_maxAngle{89.0};

	const units::length::inch_t m_minHeight{0.0};
	const units::length::inch_t m_maxHeight{30.0};

	const units::length::inch_t m_elevatorErrorThreshold{4.0};
	const units::length::inch_t m_elevatorProtectionHeight{5.0};
	const units::length::inch_t m_elevatorPreventionHeight{15.5}; // L3 height
	const units::angle::degree_t m_armProtectionAngle{10.0};
	const units::angle::degree_t m_armHoldAngle{90.0};
	const units::angle::degree_t m_armGrabAlgeAngle{70.0};
	const units::angle::degree_t m_armErrorThreshold{15.0};

	const double m_manualControlThreshold = 0.1;

	double m_elevatorKP = 0.0; // all of these will be tuned :)
	double m_elevatorKI = 0.0;
	double m_elevatorKD = 0.0;
	units::voltage::volt_t m_elevatorFeedForwardVoltage = 0.0_V;
	const units::velocity::feet_per_second_t kMaxElevatorVelocity = 2.5_fps;
	const units::acceleration::feet_per_second_squared_t kMaxElevatorAcceleration = 5.0_fps_sq;

	frc::TrapezoidProfile<units::length::inch>::Constraints m_elevatorConstraints{kMaxElevatorVelocity, kMaxElevatorAcceleration};

	frc::ProfiledPIDController<units::length::inch> m_elevatorController{m_elevatorKP, m_elevatorKI, m_elevatorKD, m_elevatorConstraints, 20_ms};

	void InitializeTalonFXArmPRACTICE_BOT9999();
	void InitializeTalonFXElevatorLeaderPRACTICE_BOT9999();
	void InitializeTalonFXAlgaePRACTICE_BOT9999();
	void InitializeTalonFXElevatorFollowerPRACTICE_BOT9999();
	void InitializeTalonFXSCoralPRACTICE_BOT9999();
	void InitializeTalonFXArmCOMP_BOT302();
	void InitializeTalonFXElevatorLeaderCOMP_BOT302();
	void InitializeTalonFXElevatorFollowerCOMP_BOT302();
	void InitializeTalonFXSCoralCOMP_BOT302();
	void InitializeTalonFXSAlgaeCOMP_BOT302();

	void IsElevatorInSync();

	void SetAlgaeMotor();

	ctre::phoenix6::controls::MotionMagicExpoVoltage m_ArmPositionDegree{0_tr};
	ctre::phoenix6::controls::MotionMagicExpoVoltage m_ElevatorLeaderPositionInch{0_tr};

	ctre::phoenix6::controls::DutyCycleOut m_CoralPercentOutput{0.0};
	ctre::phoenix6::controls::DutyCycleOut m_AlgaePercentOutput{0.0};
	ctre::phoenix6::controls::DutyCycleOut m_ElevatorLeaderPercentOutput{0.0};
	ctre::phoenix6::controls::DutyCycleOut m_ArmPercentOutput{0.0};
	ctre::phoenix6::controls::VoltageOut m_ElevatorLeaderVoltageOutput{0.0_V};

	ctre::phoenix6::controls::ControlRequest *m_ArmActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_ElevatorLeaderActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_CoralActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_AlgaeTalonFXActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_AlgaeTalonFXSActiveTarget;

	double m_changeRate = 0.35;

	bool m_manualMode = false;

	units::length::inch_t m_elevatorAtTargetThreshold{1.0};
	units::angle::degree_t m_ArmAtTargetThreshold{2.0}; // 1.0

	frc::Pose2d m_robotPose;

	bool m_isArmRotating = false;
	const units::angular_velocity::degrees_per_second_t m_dpsThreshold{5.0};

	// elevator diagnostics and remedial action variables
	bool m_elevatorDesiredDirectionUp;
	const int m_elevatorMaxFails = 12;
	int m_currElevatorFails;
	bool m_elevatorRemedialAction = false;

	units::length::inch_t m_motorCountInches;
	double m_elevatorGearRatio;
	double m_elevatorDiameterInch;

	frc::Timer m_powerTimer;
	double m_power = 0.0;
	double m_energy = 0.0;
	double m_totalEnergy = 0.0;
	double m_totalWattHours = 0.0;
	double m_armLoggingTarget = 85.0;
	// WriteDouble returns a type of error if there are proble
	ctre::phoenix::StatusCode LogArm(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, units, units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogArmTarget(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogArmPower(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogArmEnergy(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorLeader(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorLeaderTarget(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorLeaderPower(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorLeaderEnergy(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogAlgaePower(string name, uint64_t timestamp, string units, double value) { return m_activeRobotId == RobotIdentifier::PRACTICE_BOT_9999 ? SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)) : SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogAlgaeEnergy(string name, uint64_t timestamp, string units, double value) { return m_activeRobotId == RobotIdentifier::PRACTICE_BOT_9999 ? SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)) : SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorFollower(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorFollowerTarget(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorFollowerPower(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogElevatorFollowerEnergy(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogCoralPower(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogCoralEnergy(string name, uint64_t timestamp, string units, double value) { return SignalLogger::WriteDouble(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogCoralInSensor(string name, uint64_t timestamp, bool value) { return SignalLogger::WriteBoolean(name, value, units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogCoralOutSensor(string name, uint64_t timestamp, bool value) { return SignalLogger::WriteBoolean(name, value, units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogAlgaeSensor(string name, uint64_t timestamp, bool value) { return SignalLogger::WriteBoolean(name, value, units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogDragonTaleTotalEnergy(string name, uint64_t timestamp, string units, int value) { return SignalLogger::WriteInteger(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogDragonTaleTotalWattHours(string name, uint64_t timestamp, string units, int value) { return SignalLogger::WriteInteger(name, value, "units", units::time::second_t(0.0_s)); }
	ctre::phoenix::StatusCode LogDragonTaleState(string name, uint64_t timestamp, int value) { return SignalLogger::WriteInteger(name, value, "units", units::time::second_t(0.0_s)); }
};