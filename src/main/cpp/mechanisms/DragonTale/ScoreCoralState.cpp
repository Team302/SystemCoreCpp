//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 8:51:02 PM

// C++ Includes
#include <string>

// FRC includes

// Team 302 includes
#include "mechanisms/DragonTale/ScoreCoralState.h"
#include "teleopcontrol/TeleopControl.h"
#include "teleopcontrol/TeleopControlFunctions.h"
#include "utils/logging/debug/Logger.h"

// Third Party Includes

using namespace std;
using namespace DragonTaleStates;

/// @class ExampleForwardState
/// @brief information about the control (open loop, closed loop position, closed loop velocity, etc.) for a mechanism state
ScoreCoralState::ScoreCoralState(std::string stateName,
								 int stateId,
								 DragonTale *mech,
								 RobotIdentifier activeRobotId) : State(stateName, stateId), m_mechanism(mech), m_RobotId(activeRobotId)
{
}

void ScoreCoralState::Init()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ScoreCoralState"), string("Init"));
}

void ScoreCoralState::Run()
{
	if (m_mechanism->GetElevatorHeight() < units::length::inch_t(28))
		m_mechanism->UpdateTargetCoralPercentOutput(m_CoralL1Target);
	else
		m_mechanism->UpdateTargetCoralPercentOutput(m_CoralTarget);

	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ScoreCoralState"), string("Run"));
}

void ScoreCoralState::Exit()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ScoreCoralState"), string("Exit"));
}

bool ScoreCoralState::AtTarget()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ScoreCoralState"), string("AtTarget"));

	bool atTarget = false;
	return atTarget;
}

bool ScoreCoralState::IsTransitionCondition(bool considerGamepadTransitions)
{
	// To get the current state use m_mechanism->GetCurrentState()

	return ((considerGamepadTransitions && TeleopControl::GetInstance()->IsButtonPressed(TeleopControlFunctions::SCORE)) ||
			(((m_mechanism->GetBranchCANRangeState() && m_mechanism->IsValidTarget()) || (m_mechanism->IsDriveToIsDone() && (m_mechanism->GetCurrentState() == m_mechanism->STATE_L4SCORING_POSITION))) && m_mechanism->AtTarget()));
}
