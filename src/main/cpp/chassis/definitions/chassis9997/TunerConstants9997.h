#pragma once

#include "ctre/phoenix6/swerve/SwerveDrivetrain.hpp"

using namespace ctre::phoenix6;

/// @brief Exported file from CTRE Tuner X Swerve Project Generator
/// @brief Changes made:
/// @brief 1) Rename file from TunerConstants.h to TunerConstantsXXXX.h where XXXX is the robot number
/// @brief 2) Rename class to match file name
/// @brief 3) Comment out (or delete) the TunerSwerveDrivetrain class (carefule there are block end comments in this block)
/// @brief 4) Comment out (or delete) forward declaration of CommandSwerveDrivetrain
/// @brief 5) Comment out (or delete) static subsystems::CommandSwerveDrivetrain CreateDrivetrain();
/// @brief 6) Comment out (or delete) static constexpr swerve::SwerveDrivetrainConstants lines
/// @brief 7) Comment out (or delete) the private: after this previous block
/// @brief 8) Comment out (or delete) static constexpr swerve::SwerveModuleConstantsFactory ConstantCreator = lines
/// @brief 9) Comment out (or delete) the 4 static constexpr swerve::SwerveModuleConstants definitions
/// @brief 10) Comment out (or delete) private before inversion constants
/// @brief 11) Add public at beginnning of TunerConstans9998 class

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
class TunerConstants9997
{
public:
    // Both sets of gains need to be tuned to your individual robot.

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants::SteerMotorClosedLoopOutput
    static constexpr configs::Slot0Configs steerGains = configs::Slot0Configs{}
                                                            .WithKP(100)
                                                            .WithKI(0)
                                                            .WithKD(0.5)
                                                            .WithKS(0.1)
                                                            .WithKV(0)
                                                            .WithKA(0)
                                                            .WithStaticFeedforwardSign(signals::StaticFeedforwardSignValue::UseClosedLoopSign);
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants::DriveMotorClosedLoopOutput
    static constexpr configs::Slot0Configs driveGains = configs::Slot0Configs{}
                                                            .WithKP(0.1)
                                                            .WithKI(0)
                                                            .WithKD(0)
                                                            .WithKS(0)
                                                            .WithKV(0.124);

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    static constexpr swerve::ClosedLoopOutputType kSteerClosedLoopOutput = swerve::ClosedLoopOutputType::Voltage;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    static constexpr swerve::ClosedLoopOutputType kDriveClosedLoopOutput = swerve::ClosedLoopOutputType::Voltage;

    // The type of motor used for the drive motor
    static constexpr swerve::DriveMotorArrangement kDriveMotorType = swerve::DriveMotorArrangement::TalonFX_Integrated;
    // The type of motor used for the drive motor
    static constexpr swerve::SteerMotorArrangement kSteerMotorType = swerve::SteerMotorArrangement::TalonFX_Integrated;

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
    static constexpr swerve::SteerFeedbackType kSteerFeedbackType = swerve::SteerFeedbackType::FusedCANcoder;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    static constexpr units::ampere_t kSlipCurrent = 120_A;

    // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
    // Some configs will be overwritten; check the `With*InitialConfigs()` API documentation.
    static constexpr configs::TalonFXConfiguration driveInitialConfigs{};
    static constexpr configs::TalonFXConfiguration steerInitialConfigs = configs::TalonFXConfiguration{}
                                                                             .WithCurrentLimits(
                                                                                 configs::CurrentLimitsConfigs{}
                                                                                     // Swerve azimuth does not require much torque output, so we can set a relatively low
                                                                                     // stator current limit to help avoid brownouts without impacting performance.
                                                                                     .WithStatorCurrentLimit(60_A)
                                                                                     .WithStatorCurrentLimitEnable(true));
    static constexpr configs::CANcoderConfiguration encoderInitialConfigs{};
    // Configs for the Pigeon 2; leave this nullopt to skip applying Pigeon 2 configs
    static constexpr std::optional<configs::Pigeon2Configuration> pigeonConfigs = std::nullopt;

    static constexpr std::string_view kCANBusName = "";

public:
    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    static inline const CANBus kCANBus{kCANBusName, "./logs/example.hoot"};

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    static constexpr units::meters_per_second_t kSpeedAt12Volts = 3.92_mps;

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    static constexpr units::scalar_t kCoupleRatio = 3.5714285714285716;

    static constexpr units::scalar_t kDriveGearRatio = 6.86;
    static constexpr units::scalar_t kSteerGearRatio = 12.8;
    static constexpr units::inch_t kWheelRadius = 2_in;

    static constexpr bool kInvertLeftSide = false;
    static constexpr bool kInvertRightSide = true;

    static constexpr int kPigeonId = 50;

    // These are only used for simulation
    static constexpr units::kilogram_square_meter_t kSteerInertia = 0.01_kg_sq_m;
    static constexpr units::kilogram_square_meter_t kDriveInertia = 0.01_kg_sq_m;
    // Simulated voltage necessary to overcome friction
    static constexpr units::volt_t kSteerFrictionVoltage = 0.2_V;
    static constexpr units::volt_t kDriveFrictionVoltage = 0.2_V;

public:
    // Front Left
    static constexpr int kFrontLeftDriveMotorId = 15;
    static constexpr int kFrontLeftSteerMotorId = 14;
    static constexpr int kFrontLeftEncoderId = 14;
    static constexpr units::turn_t kFrontLeftEncoderOffset = 0.20361328125_tr;
    static constexpr bool kFrontLeftSteerMotorInverted = false;
    static constexpr bool kFrontLeftEncoderInverted = true;

    static constexpr units::inch_t kFrontLeftXPos = 6.625_in;
    static constexpr units::inch_t kFrontLeftYPos = 6.625_in;

    // Front Right
    static constexpr int kFrontRightDriveMotorId = 13;
    static constexpr int kFrontRightSteerMotorId = 12;
    static constexpr int kFrontRightEncoderId = 12;
    static constexpr units::turn_t kFrontRightEncoderOffset = -0.3037109375_tr;
    static constexpr bool kFrontRightSteerMotorInverted = false;
    static constexpr bool kFrontRightEncoderInverted = true;

    static constexpr units::inch_t kFrontRightXPos = 6.625_in;
    static constexpr units::inch_t kFrontRightYPos = -6.625_in;

    // Back Left
    static constexpr int kBackLeftDriveMotorId = 1;
    static constexpr int kBackLeftSteerMotorId = 0;
    static constexpr int kBackLeftEncoderId = 0;
    static constexpr units::turn_t kBackLeftEncoderOffset = -0.1906738281255_tr;
    static constexpr bool kBackLeftSteerMotorInverted = false;
    static constexpr bool kBackLeftEncoderInverted = true;

    static constexpr units::inch_t kBackLeftXPos = -6.625_in;
    static constexpr units::inch_t kBackLeftYPos = 6.625_in;

    // Back Right
    static constexpr int kBackRightDriveMotorId = 3;
    static constexpr int kBackRightSteerMotorId = 2;
    static constexpr int kBackRightEncoderId = 2;
    static constexpr units::turn_t kBackRightEncoderOffset = 0.343505859375_tr;
    static constexpr bool kBackRightSteerMotorInverted = false;
    static constexpr bool kBackRightEncoderInverted = true;

    static constexpr units::inch_t kBackRightXPos = -6.625_in;
    static constexpr units::inch_t kBackRightYPos = -6.625_in;
};
