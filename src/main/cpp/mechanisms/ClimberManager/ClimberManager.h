//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 5:48:03 PM

#pragma once

#include <memory>
#include <string>

// FRC Includes
#include <networktables/NetworkTable.h>
#include "wpi/datalog/DataLog.h"

#include "ctre/phoenix6/TalonFX.hpp"
#include "ctre/phoenix6/TalonFXS.hpp"
#include "ctre/phoenix6/controls/Follower.hpp"
#include "ctre/phoenix6/configs/Configs.hpp"
#include "ctre/phoenix6/SignalLogger.hpp"

#include "mechanisms/base/BaseMech.h"
#include "state/StateMgr.h"
#include "state/IRobotStateChangeSubscriber.h"
#include "mechanisms/controllers/ControlData.h"
#include "state/RobotStateChanges.h"

#include "configs/RobotElementNames.h"
#include "configs/MechanismConfigMgr.h"
#include "utils/logging/signals/DragonDataLogger.h"

#include "RobotIdentifier.h"

using ctre::phoenix6::SignalLogger;

class ClimberManager : public BaseMech, public StateMgr, public DragonDataLogger, public IRobotStateChangeSubscriber
{
public:
	enum STATE_NAMES
	{
		STATE_INIT,
		STATE_OFF,
		STATE_CLIMB,
		STATE_DELIVER_CLIMBER
	};

	ClimberManager(RobotIdentifier activeRobotId);
	ClimberManager() = delete;
	~ClimberManager() = default;

	void CreatePRACTICE_BOT9999();
	void CreateCOMP_BOT302();
	void InitializePRACTICE_BOT9999();
	void InitializeCOMP_BOT302();

	/// @brief Set the control constants (e.g. PIDF values).
	/// @param indentifier the motor controller usage to identify the motor
	/// @param slot position on the motor controller to set
	/// @param pid control data / constants
	virtual void SetControlConstants(RobotElementNames::MOTOR_CONTROLLER_USAGE indentifier, int slot, ControlData pid);

	/// @brief update the output to the mechanism using the current controller and target value(s)
	virtual void Update();

	void UpdateTargetClimberPercentOut(double percentOut)
	{
		m_ClimberPercentOut.Output = percentOut;
		m_ClimberActiveTarget = &m_ClimberPercentOut;
	}
	void UpdateTargetClimberPositionDegree(units::angle::turn_t position)
	{
		m_ClimberPositionDegree.Position = position;
		m_ClimberActiveTarget = &m_ClimberPositionDegree.WithSlot(0);
	}
	void UpdateTargetClimberPositionDegreeUp(units::angle::turn_t position)
	{
		m_ClimberPositionDegreeUp.Position = position;
		m_ClimberActiveTarget = &m_ClimberPositionDegreeUp.WithSlot(1);
	}

	void CreateAndRegisterStates();
	void Cyclic();
	void RunCommonTasks() override;
	void DataLog(uint64_t timestamp) override;

	bool AtTarget();

	bool IsClimbMode() const { return m_climbMode == RobotStateChanges::ClimbMode::ClimbModeOn; }
	bool IsTeleop() { return m_gameMode == RobotStateChanges::GamePeriod::Teleop; };
	void NotifyStateUpdate(RobotStateChanges::StateChange stchange, int value) override;

	RobotIdentifier getActiveRobotId() { return m_activeRobotId; }

	ctre::phoenix6::hardware::TalonFX *GetClimber() const { return m_Climber; }
	ControlData *GetPositionDegree() const { return m_PositionDegree; }
	ControlData *GetPercentOut() const { return m_PercentOut; }
	ControlData *GetPositionDegreeUp() const { return m_PositionDegreeUp; }

	static std::map<std::string, STATE_NAMES> stringToSTATE_NAMESEnumMap;

	void SetCurrentState(int state, bool run) override;

protected:
	RobotIdentifier m_activeRobotId;
	std::string m_ntName;

	ControlData *GetControlData(std::string name) override;

private:
	std::unordered_map<std::string, STATE_NAMES> m_stateMap;

	ctre::phoenix6::hardware::TalonFX *m_Climber;
	ControlData *m_PositionDegree;
	ControlData *m_PercentOut;
	ControlData *m_PositionDegreeUp;

	RobotStateChanges::GamePeriod m_gameMode;
	RobotStateChanges::ClimbMode m_climbMode;

	void InitializeTalonFXClimberPRACTICE_BOT9999();
	void InitializeTalonFXClimberCOMP_BOT302();

	ctre::phoenix6::controls::DutyCycleOut m_ClimberPercentOut{0.0};
	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_ClimberPositionDegree{units::angle::turn_t(0.0)};
	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_ClimberPositionDegreeUp{units::angle::turn_t(0.0)};
	ctre::phoenix6::controls::ControlRequest *m_ClimberActiveTarget;

	units::angle::turn_t m_climberThreshold{3.0};
};