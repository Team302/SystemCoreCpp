//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 6:47:31 PM

#include <string>

#include "configs/MechanismConfigCOMP_BOT_302.h"
#include "feedback/DragonLeds.h"
#include "utils/logging/debug/Logger.h"

using std::string;

void MechanismConfigCOMP_BOT_302::DefineMechanisms()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Initializing mechanism"), string("ClimberManager"), "");
	m_theClimberManager = new ClimberManager(RobotIdentifier::COMP_BOT_302);
	m_theClimberManager->CreateCOMP_BOT302();
	m_theClimberManager->CreateAndRegisterStates();
	m_theClimberManager->InitializeCOMP_BOT302();
	m_theClimberManager->Init(/*m_theClimberManager*/);
	m_mechanismMap[MechanismTypes::MECHANISM_TYPE::CLIMBER_MANAGER] = m_theClimberManager;

	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("Initializing mechanism"), string("DragonTale"), "");
	m_theDragonTale = new DragonTale(RobotIdentifier::COMP_BOT_302);
	m_theDragonTale->CreateCOMP_BOT302();
	m_theDragonTale->CreateAndRegisterStates();
	m_theDragonTale->InitializeCOMP_BOT302();
	m_theDragonTale->Init(/*m_theDragonTale*/);
	m_mechanismMap[MechanismTypes::MECHANISM_TYPE::DRAGON_TALE] = m_theDragonTale;
}

StateMgr *MechanismConfigCOMP_BOT_302::GetMechanism(MechanismTypes::MECHANISM_TYPE mechType)
{
	auto itr = m_mechanismMap.find(mechType);
	if (itr != m_mechanismMap.end())
	{
		return itr->second;
	}
	return nullptr;
}

void MechanismConfigCOMP_BOT_302::DefineLEDs()
{
	DragonLeds::GetInstance()->Initialize(9, 45);
}