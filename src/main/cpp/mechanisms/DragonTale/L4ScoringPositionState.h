//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 8:51:02 PM

#pragma once
#include <string>

#include "mechanisms/DragonTale/DragonTale.h"
#include "state/State.h"

using namespace std;

namespace DragonTaleStates
{
	class L4ScoringPositionState : public State
	{
	public:
		L4ScoringPositionState() = delete;
		L4ScoringPositionState(std::string stateName,
							   int stateId,
							   DragonTale *mech,
							   RobotIdentifier activeRobotId);
		~L4ScoringPositionState() = default;
		void Init() override;
		void Run() override;
		void Exit() override;
		bool AtTarget() override;
		bool IsTransitionCondition(bool considerGamepadTransitions) override;

	private:
		DragonTale *m_mechanism;
		RobotIdentifier m_RobotId;
		const units::angle::degree_t m_ArmTarget = units::angle::degree_t(50);
		const units::length::inch_t m_ElevatorLeaderTarget = units::length::inch_t(29.25);
		const double m_CoralTarget = double(0);
		const double m_AlgaeTarget = double(0);
		units::angle::degree_t m_cappingAngleFactor = units::angle::degree_t(5);
	};
}
